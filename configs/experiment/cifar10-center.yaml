# @package _global_

# to execute this experiment run:
# python run.py experiment=example_full.yaml

defaults:
  - override /trainer: null # override trainer to null so it's not loaded from main config defaults...
  - override /model: null
  - override /datamodule: cifar10
  - override /callbacks: null
  - override /logger: default
  - override /testmodules: cifar10

# we override default configurations with nulls to prevent them from loading at all
# instead we define all modules and their paths directly in this config,
# so everything is stored in one place

seed: 12345
deterministic: True

trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0
  min_epochs: 20
  max_epochs: 20
  # limit_train_batches: 784 # 392 batches x2
  #  gradient_clip_val: 0.5
  #  accumulate_grad_batches: 2
  weights_summary: null
  # resume_from_checkpoint: ${work_dir}/last.ckpt

model:
  _target_: src.models.Center
  lr: 0.001
  weight_decay: 0.00005
  # pretrained weights?
  pretrained: null
  n_classes: 10
  n_embedding: 16 # same as mchad
  weight_center: 0.5 # default, as given in the paper
  backbone:
    _target_: src.models.modules.wrn.WideResNet
    num_classes: 16
    widen_factor: 2
    depth: 40
    drop_rate: 0.3

callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: "Accuracy/val" # name of the logged metric which determines when model is improving
    save_top_k: 1 # save k best models (determined by above metric)
    save_last: True # additionaly always save model from last epoch
    mode: "max" # can be "max" or "min"
    verbose: False
    dirpath: "checkpoints/"
    filename: "{epoch:02d}"
  lr_monitor:
    _target_: pytorch_lightning.callbacks.LearningRateMonitor

  softmax:
    _target_: src.callbacks.softmax.SoftmaxThresholding
    use_in_val: True
    use_in_test: True
  energy:
    _target_: src.callbacks.energy.EnergyBased
    temperature: 1
    use_in_val: True
    use_in_test: True
